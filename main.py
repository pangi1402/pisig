import requests
import schedule
import time
from datetime import datetime
import matplotlib.pyplot as plt
from matplotlib.offsetbox import OffsetImage, AnnotationBbox
from io import BytesIO
from telegram import Bot
from flask import Flask
import threading
import os
import snscrape.modules.twitter as sntwitter

# C·∫•u h√¨nh bot
TOKEN = "7643943023:AAFOUB7PAiT286EarptGwIXTzxHwQfAaPe0"
CHAT_ID = "@pisig_pangi"
bot = Bot(token=TOKEN)

# Bi·∫øn l∆∞u ID b√†i Twitter ƒë√£ g·ª≠i
last_sent_tweet_ids = {}

# G·ª≠i tin nh·∫Øn + ·∫£nh (h·ªó tr·ª£ Markdown)
def send_signal_message(text, fig=None):
    if fig:
        buf = BytesIO()
        fig.savefig(buf, format='png')
        buf.seek(0)
        bot.send_photo(chat_id=CHAT_ID, photo=buf, caption=text, parse_mode="Markdown")
        plt.close(fig)
    else:
        bot.send_message(chat_id=CHAT_ID, text=text, parse_mode="Markdown")

# L·∫•y d·ªØ li·ªáu gi√° PI t·ª´ MEXC
def fetch_price_data():
    url = "https://api.coingecko.com/api/v3/coins/pi-network/market_chart?vs_currency=usd&days=7&interval=hourly"
    try:
        res = requests.get(url)
        if res.status_code != 200:
            print(f"‚ö†Ô∏è API CoinGecko l·ªói: {res.status_code}")
            return [], []
        data = res.json()
        raw_prices = data.get("prices", [])

        # Gh√©p 4 c√¢y 1H th√†nh 1 c√¢y 4H
        prices = []
        dates = []
        for i in range(0, len(raw_prices), 4):
            batch = raw_prices[i:i+4]
            if len(batch) == 4:
                price = batch[-1][1]  # gi√° ƒë√≥ng c·ª≠a c√¢y 4H
                time_stamp = batch[-1][0]
                prices.append(price)
                date_str = datetime.fromtimestamp(time_stamp / 1000).strftime("%d/%m %H:%M")
                dates.append(date_str)

        return prices, dates

    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói l·∫•y d·ªØ li·ªáu t·ª´ CoinGecko: {e}")
        return [], []

# T√≠nh SMA, RSI
def calc_sma(data, period=20):
    return [sum(data[i - period:i]) / period if i >= period else None for i in range(len(data))]

def calc_rsi(data, period=14):
    rsis = []
    for i in range(period, len(data)):
        gains = losses = 0
        for j in range(i - period + 1, i + 1):
            delta = data[j] - data[j - 1]
            if delta > 0:
                gains += delta
            else:
                losses -= delta
        avg_gain = gains / period
        avg_loss = losses / period if losses != 0 else 1e-10
        rs = avg_gain / avg_loss
        rsi = 100 - (100 / (1 + rs))
        rsis.append(rsi)
    return [None] * period + rsis

# Th√™m logo v√†o bi·ªÉu ƒë·ªì n·∫øu c√≥
def add_logo(fig, ax):
    logo_path = "logo.png"
    if os.path.exists(logo_path):
        try:
            logo_img = plt.imread(logo_path)
            imagebox = OffsetImage(logo_img, zoom=0.06)
            ab = AnnotationBbox(imagebox, (0.88, 0.14), xycoords='axes fraction', frameon=False)
            ax.add_artist(ab)
        except Exception as e:
            print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ch√®n logo: {e}")

# H√†m g·ª≠i t√≠n hi·ªáu k·ªπ thu·∫≠t ƒë·ªãnh k·ª≥
def check_signals():
    print(f"üïí {datetime.now().strftime('%H:%M:%S')} ‚Äì Check t√≠n hi·ªáu k·ªπ thu·∫≠t...")
    prices, dates = fetch_price_data()
    if not prices:
        print("‚õî Kh√¥ng c√≥ d·ªØ li·ªáu gi√°.")
        return

    sma20 = calc_sma(prices, 20)
    sma50 = calc_sma(prices, 50)
    rsi = calc_rsi(prices, 14)

    latest_price = prices[-1]
    latest_rsi = rsi[-1]
    latest_sma20 = sma20[-1]
    latest_sma50 = sma50[-1]

    signal = f"""üìà *PI/USDT - C·∫≠p nh·∫≠t k·ªπ thu·∫≠t:*

‚Ä¢ *Gi√° hi·ªán t·∫°i:* `${latest_price:.4f}`
‚Ä¢ *RSI(14):* `{latest_rsi:.2f}`
‚Ä¢ *SMA20:* `{latest_sma20:.4f}`
‚Ä¢ *SMA50:* `{latest_sma50:.4f}`
"""

    if latest_rsi < 30:
        signal += "\n\nüîª *RSI < 30 ‚Üí T√≠n hi·ªáu qu√° b√°n, c∆° h·ªôi t√≠ch l≈©y ƒë·∫πp.*"
    elif latest_rsi > 30 and rsi[-2] < 30 and latest_price > latest_sma20:
        signal += "\n\n‚úÖ *RSI b·∫≠t t·ª´ d∆∞·ªõi 30 l√™n + Gi√° v∆∞·ª£t SMA ‚Üí ƒêi·ªÉm mua k·ªπ thu·∫≠t ƒë·∫πp.*"
    else:
        signal += "\n\n‚ÑπÔ∏è *Kh√¥ng c√≥ t√≠n hi·ªáu mua n·ªïi b·∫≠t, ti·∫øp t·ª•c theo d√µi t√≠ch l≈©y.*"

    # G·ª≠i t√≠n hi·ªáu + bi·ªÉu ƒë·ªì
    fig, ax = plt.subplots(figsize=(12, 6))
    ax.plot(dates, prices, label="Gi√°", linewidth=2)
    ax.plot(dates, sma20, label="SMA20", linestyle="--")
    ax.plot(dates, sma50, label="SMA50", linestyle="-.")
    ax2 = ax.twinx()
    ax2.plot(dates, rsi, label="RSI", color="purple", linestyle="dotted")
    ax.set_xlabel("Th·ªùi gian (4H)")
    ax.set_ylabel("Gi√°")
    ax2.set_ylabel("RSI")
    ax.grid(True, linestyle="--", alpha=0.5)
    ax.legend(loc="upper left")
    ax2.legend(loc="upper right")
    ax.set_xticks(dates[::8])
    ax.tick_params(axis="x", rotation=45)
    fig.suptitle("PI/USDT - 4H (Gi√°, RSI, SMA)", fontsize=12)
    fig.tight_layout()

    add_logo(fig, ax)
    send_signal_message(signal, fig)
    print("üì® ƒê√£ g·ª≠i c·∫≠p nh·∫≠t k·ªπ thu·∫≠t v·ªÅ Telegram.")

# H√†m l·∫•y b√†i m·ªõi t·ª´ Twitter
def fetch_latest_tweet(username):
    try:
        for tweet in sntwitter.TwitterUserScraper(username).get_items():
            return tweet
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói Twitter @{username}: {e}")
        return None

# G·ª≠i b√†i m·ªõi t·ª´ nhi·ªÅu t√†i kho·∫£n Twitter
def send_latest_tweets():
    usernames = ["PiCoreTeam", "Pi_diange"]
    for user in usernames:
        tweet = fetch_latest_tweet(user)
        if tweet:
            tweet_id = tweet.id
            if last_sent_tweet_ids.get(user) != tweet_id:
                last_sent_tweet_ids[user] = tweet_id
                message = f"üì∞ *C·∫≠p nh·∫≠t t·ª´ @{user}:*\n\n{tweet.content}"
                bot.send_message(chat_id=CHAT_ID, text=message, parse_mode="Markdown")
                print(f"‚úÖ ƒê√£ g·ª≠i b√†i m·ªõi t·ª´ @{user}")
            else:
                print(f"‚ÑπÔ∏è Ch∆∞a c√≥ b√†i m·ªõi t·ª´ @{user}")

# Setup Flask webserver ƒë·ªÉ gi·ªØ s·ªëng bot
app = Flask(__name__)
@app.route("/")
def home():
    return "Pi Signal Bot is running."

def run_loop():
    while True:
        schedule.run_pending()
        time.sleep(60)

# L·ªãch check t√≠n hi·ªáu k·ªπ thu·∫≠t (theo gi·ªù UTC)
schedule.every().day.at("02:00").do(check_signals)  # 9h VN
schedule.every().day.at("05:00").do(check_signals)  # 12h VN
schedule.every().day.at("10:00").do(check_signals)  # 17h VN
schedule.every().day.at("16:30").do(check_signals)  # 23h30 VN

# L·ªãch qu√©t b√†i Twitter
schedule.every(30).minutes.do(send_latest_tweets)

# Kh·ªüi ƒë·ªông
check_signals()
send_latest_tweets()

threading.Thread(target=run_loop).start()
app.run(host="0.0.0.0", port=8080)
