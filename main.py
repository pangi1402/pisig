import requests
import schedule
import time
from datetime import datetime
import matplotlib.pyplot as plt
from matplotlib.offsetbox import OffsetImage, AnnotationBbox
from io import BytesIO
from telegram import Bot
from flask import Flask
import socket
import threading
import os
import snscrape.modules.twitter as sntwitter

# C·∫•u h√¨nh bot
TOKEN = "7643943023:AAFOUB7PAiT286EarptGwIXTzxHwQfAaPe0"
CHAT_ID = "@pisig_pangi"  # Channel

bot = Bot(token=TOKEN)

# Bi·∫øn l∆∞u ID tweet ƒë√£ g·ª≠i (d√πng dict ƒë·ªÉ l∆∞u nhi·ªÅu t√†i kho·∫£n)
last_sent_tweet_ids = {}

# G·ª≠i t√≠n hi·ªáu k·ªπ thu·∫≠t + ·∫£nh cover
def send_signal_message(text, fig=None):
    if fig:
        buf = BytesIO()
        fig.savefig(buf, format='png')
        buf.seek(0)
        bot.send_photo(chat_id=CHAT_ID, photo=buf, caption=text)
        plt.close(fig)

    if os.path.exists("cover.org"):
        with open("cover.org", "rb") as cover:
            bot.send_photo(chat_id=CHAT_ID, photo=cover, caption="üì¢ Pi Signal by Pangi ‚Äì T√≠n hi·ªáu k·ªπ thu·∫≠t & t√≠ch l≈©y crypto!")

# Qu√©t b√†i m·ªõi t·ª´ Twitter
def fetch_latest_tweet(username):
    try:
        for tweet in sntwitter.TwitterUserScraper(username).get_items():
            return tweet
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói khi l·∫•y Twitter {username}: {e}")
        return None

def send_latest_tweets():
    usernames = ["PiCoreTeam", "Pi_diange"]
    for user in usernames:
        tweet = fetch_latest_tweet(user)
        if tweet:
            tweet_id = tweet.id
            if last_sent_tweet_ids.get(user) != tweet_id:
                last_sent_tweet_ids[user] = tweet_id
                message = f"üì∞ C·∫≠p nh·∫≠t t·ª´ @{user}:\n\n{tweet.content}"
                bot.send_message(chat_id=CHAT_ID, text=message)
                print(f"‚úÖ ƒê√£ g·ª≠i b√†i m·ªõi t·ª´ @{user}")
            else:
                print(f"‚ÑπÔ∏è Ch∆∞a c√≥ b√†i m·ªõi t·ª´ @{user}")

# L·∫•y d·ªØ li·ªáu gi√° PI/USDT t·ª´ MEXC
def fetch_price_data():
    url = "https://www.mexc.com/open/api/v2/market/kline?symbol=PI_USDT&interval=4h&limit=120"
    try:
        res = requests.get(url)
        if res.status_code != 200:
            print(f"‚ö†Ô∏è API l·ªói: {res.status_code}")
            return [], []
        data = res.json()
        klines = data.get("data", [])
        prices = [float(candle[2]) for candle in klines]
        dates = [datetime.fromtimestamp(int(candle[0]) / 1000).strftime("%d/%m %H:%M") for candle in klines]
        return prices, dates
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói khi l·∫•y d·ªØ li·ªáu: {e}")
        return [], []

def calc_sma(data, period=20):
    return [sum(data[i - period:i]) / period if i >= period else None for i in range(len(data))]

def calc_rsi(data, period=14):
    rsis = []
    for i in range(period, len(data)):
        gains = losses = 0
        for j in range(i - period + 1, i + 1):
            delta = data[j] - data[j - 1]
            if delta > 0:
                gains += delta
            else:
                losses -= delta
        avg_gain = gains / period
        avg_loss = losses / period if losses != 0 else 1e-10
        rs = avg_gain / avg_loss
        rsi = 100 - (100 / (1 + rs))
        rsis.append(rsi)
    return [None] * period + rsis

def add_logo(fig, ax):
    logo_path = "logo.png"
    if os.path.exists(logo_path):
        try:
            logo_img = plt.imread(logo_path)
            imagebox = OffsetImage(logo_img, zoom=0.06)
            ab = AnnotationBbox(imagebox, (0.88, 0.14), xycoords='axes fraction', frameon=False)
            ax.add_artist(ab)
        except Exception as e:
            print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ch√®n logo: {e}")

def check_signals():
    print(f"üïí {datetime.now().strftime('%H:%M:%S')} ‚Äì Check t√≠n hi·ªáu...")
    prices, dates = fetch_price_data()
    if not prices:
        print("‚õî Kh√¥ng c√≥ d·ªØ li·ªáu gi√°.")
        return

    sma20 = calc_sma(prices, 20)
    sma50 = calc_sma(prices, 50)
    rsi = calc_rsi(prices, 14)

    latest_price = prices[-1]
    latest_rsi = rsi[-1]
    latest_sma20 = sma20[-1]
    latest_sma50 = sma50[-1]

    signal = f"""üìä PI/USDT (4H)
Gi√°: ${latest_price:.4f}
RSI(14): {latest_rsi:.2f}
SMA20: {latest_sma20:.4f}
SMA50: {latest_sma50:.4f}
"""

    if latest_rsi < 30:
        signal += "üîª RSI < 30 ‚Üí Qu√° b√°n ‚Üí C√¢n nh·∫Øc mua d·∫ßn\n"
    elif 45 <= latest_rsi <= 55:
        signal += "üìò RSI ~50 ‚Üí T√≠ch l≈©y\n"
    elif latest_rsi > 70:
        signal += "‚ö†Ô∏è RSI > 70 ‚Üí Tr√°nh mua th√™m\n"

    if latest_price < latest_sma20 or latest_price < latest_sma50:
        signal += "üìâ Gi√° < SMA ‚Üí T√≠ch l≈©y gi√° th·∫•p\n"
    elif latest_rsi > 30 and rsi[-2] < 30 and latest_price > latest_sma20:
        signal += "‚úÖ RSI b·∫≠t t·ª´ <30 & v∆∞·ª£t SMA ‚Üí MUA ƒê·∫∏P\n"

    fig, ax = plt.subplots(figsize=(12, 6))
    ax.plot(dates, prices, label="Gi√°", linewidth=2)
    ax.plot(dates, sma20, label="SMA20", linestyle="--")
    ax.plot(dates, sma50, label="SMA50", linestyle="-.")
    ax2 = ax.twinx()
    ax2.plot(dates, rsi, label="RSI", color="purple", linestyle="dotted")
    ax.set_xlabel("Th·ªùi gian (4H)")
    ax.set_ylabel("Gi√°")
    ax2.set_ylabel("RSI")
    ax.grid(True, linestyle="--", alpha=0.5)
    ax.legend(loc="upper left")
    ax2.legend(loc="upper right")
    ax.set_xticks(dates[::8])
    ax.tick_params(axis="x", rotation=45)
    fig.suptitle("PI/USDT - 4H (Gi√°, RSI, SMA)", fontsize=12)
    fig.tight_layout()

    add_logo(fig, ax)
    send_signal_message(signal, fig)
    print("üì® ƒê√£ g·ª≠i t√≠n hi·ªáu v·ªÅ Channel")

# üïí L·ªãch g·ª≠i t√≠n hi·ªáu k·ªπ thu·∫≠t
schedule.every().day.at("02:00").do(check_signals)  # 9h VN
schedule.every().day.at("05:00").do(check_signals)  # 12h VN
schedule.every().day.at("10:00").do(check_signals)  # 17h VN
schedule.every().day.at("16:30").do(check_signals)  # 23h30 VN

# üïí L·ªãch ki·ªÉm tra b√†i Twitter m·ªõi m·ªói 30 ph√∫t
schedule.every(30).minutes.do(send_latest_tweets)

# Flask gi·ªØ server s·ªëng
app = Flask(__name__)
@app.route("/")
def home():
    return "Pi Bot is running."

def run_loop():
    while True:
        schedule.run_pending()
        time.sleep(60)

check_signals()
send_latest_tweets()

import threading
threading.Thread(target=run_loop).start()
app.run(host="0.0.0.0", port=8080)
