import requests
import schedule
import time
from datetime import datetime
import matplotlib.pyplot as plt
from matplotlib.offsetbox import OffsetImage, AnnotationBbox
from io import BytesIO
from telegram import Bot
from flask import Flask
import socket
import threading
import os

# C·∫•u h√¨nh bot Telegram
TOKEN = "7643943023:AAFOUB7PAiT286EarptGwIXTzxHwQfAaPe0"
CHAT_ID = "6982755436"
bot = Bot(token=TOKEN)


# G·ª≠i t√≠n hi·ªáu v·ªõi bi·ªÉu ƒë·ªì v√† ·∫£nh cover
def send_signal_message(text, fig=None):
    if fig:
        buf = BytesIO()
        fig.savefig(buf, format='png')
        buf.seek(0)
        bot.send_photo(chat_id=CHAT_ID, photo=buf, caption=text)
        plt.close(fig)

    # G·ª≠i ·∫£nh n·ªÅn cover (cover.org)
    if os.path.exists("cover.org"):
        with open("cover.org", "rb") as cover:
            bot.send_photo(
                chat_id=CHAT_ID,
                photo=cover,
                caption=
                "üì¢ Pi Signal by Pangi ‚Äì T√≠n hi·ªáu k·ªπ thu·∫≠t & t√≠ch l≈©y crypto!")


# L·∫•y d·ªØ li·ªáu PI/USDT t·ª´ MEXC
def fetch_price_data():
    url = "https://www.mexc.com/open/api/v2/market/kline?symbol=PI_USDT&interval=4h&limit=120"
    try:
        res = requests.get(url)
        if res.status_code != 200:
            print(f"‚ö†Ô∏è API MEXC l·ªói: {res.status_code}")
            return [], []
        data = res.json()
        klines = data.get("data", [])
        prices = [float(candle[2]) for candle in klines]
        dates = [
            datetime.fromtimestamp(int(candle[0]) /
                                   1000).strftime("%d/%m %H:%M")
            for candle in klines
        ]
        return prices, dates
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói khi l·∫•y d·ªØ li·ªáu: {e}")
        return [], []


# T√≠nh SMA v√† RSI
def calc_sma(data, period=20):
    return [
        sum(data[i - period:i]) / period if i >= period else None
        for i in range(len(data))
    ]


def calc_rsi(data, period=14):
    rsis = []
    for i in range(period, len(data)):
        gains = losses = 0
        for j in range(i - period + 1, i + 1):
            delta = data[j] - data[j - 1]
            if delta > 0:
                gains += delta
            else:
                losses -= delta
        avg_gain = gains / period
        avg_loss = losses / period if losses != 0 else 1e-10
        rs = avg_gain / avg_loss
        rsi = 100 - (100 / (1 + rs))
        rsis.append(rsi)
    return [None] * period + rsis


# Th√™m logo (logo.png) v√†o bi·ªÉu ƒë·ªì
def add_logo(fig, ax):
    logo_path = "logo2.png"
    if os.path.exists(logo_path):
        try:
            logo_img = plt.imread(logo_path)
            imagebox = OffsetImage(logo_img, zoom=0.06)
            ab = AnnotationBbox(imagebox, (0.88, 0.14),
                                xycoords='axes fraction',
                                frameon=False)
            ax.add_artist(ab)
        except Exception as e:
            print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ch√®n logo: {e}")


# Ph√¢n t√≠ch v√† g·ª≠i t√≠n hi·ªáu
def check_signals():
    print(f"üïí {datetime.now().strftime('%H:%M:%S')} ‚Äì Ki·ªÉm tra t√≠n hi·ªáu...")
    prices, dates = fetch_price_data()
    if not prices:
        print("‚õî Kh√¥ng c√≥ d·ªØ li·ªáu gi√°.")
        return

    sma20 = calc_sma(prices, 20)
    sma50 = calc_sma(prices, 50)
    rsi = calc_rsi(prices, 14)

    latest_price = prices[-1]
    latest_rsi = rsi[-1]
    latest_sma20 = sma20[-1]
    latest_sma50 = sma50[-1]

    signal = f"""üìä PI/USDT (4H)
Gi√°: ${latest_price:.4f}
RSI(14): {latest_rsi:.2f}
SMA20: {latest_sma20:.4f}
SMA50: {latest_sma50:.4f}
"""

    if latest_rsi < 30:
        signal += "üîª RSI < 30 ‚Üí Qu√° b√°n ‚Üí C√≥ th·ªÉ c√¢n nh·∫Øc mua d·∫ßn\n"
    elif 45 <= latest_rsi <= 55:
        signal += "üìò RSI ~50 ‚Üí T√≠ch l≈©y ‚Üí Mua d·∫ßn √≠t\n"
    elif latest_rsi > 70:
        signal += "‚ö†Ô∏è RSI > 70 ‚Üí Tr√°nh mua th√™m\n"

    if latest_price < latest_sma20 or latest_price < latest_sma50:
        signal += "üìâ Gi√° < SMA ‚Üí Mua t√≠ch l≈©y ·ªü v√πng th·∫•p\n"
    elif latest_rsi > 30 and rsi[-2] < 30 and latest_price > latest_sma20:
        signal += "‚úÖ RSI b·∫≠t t·ª´ <30 & gi√° v∆∞·ª£t SMA ‚Üí MUA ƒê·∫∏P\n"

    # V·∫Ω bi·ªÉu ƒë·ªì
    fig, ax = plt.subplots(figsize=(12, 6))
    ax.plot(dates, prices, label="Gi√°", linewidth=2)
    ax.plot(dates, sma20, label="SMA20", linestyle="--")
    ax.plot(dates, sma50, label="SMA50", linestyle="-.")
    ax2 = ax.twinx()
    ax2.plot(dates, rsi, label="RSI", color="purple", linestyle="dotted")

    ax.set_xlabel("Th·ªùi gian (4H)")
    ax.set_ylabel("Gi√°")
    ax2.set_ylabel("RSI")
    ax.grid(True, linestyle="--", alpha=0.5)
    ax.legend(loc="upper left")
    ax2.legend(loc="upper right")
    ax.set_xticks(dates[::8])
    ax.tick_params(axis="x", rotation=45)
    fig.suptitle("Bi·ªÉu ƒë·ªì PI/USDT - 4H (Gi√°, RSI, SMA)", fontsize=12)
    fig.tight_layout()

    add_logo(fig, ax)
    send_signal_message(signal, fig)
    print("üì® ƒê√£ g·ª≠i t√≠n hi·ªáu v·ªÅ Telegram")


# L·ªãch g·ª≠i (UTC)
schedule.every().day.at("02:00").do(check_signals)  # 09:00 VN
schedule.every().day.at("05:00").do(check_signals)  # 12:00 VN
schedule.every().day.at("10:00").do(check_signals)  # 17:00 VN
schedule.every().day.at("16:30").do(check_signals)  # 23:30 VN

# Flask gi·ªØ s·ªëng bot
app = Flask(__name__)


@app.route("/")
def home():
    return "Pi Bot is running."


# In ƒë·ªãa ch·ªâ n·∫øu c·∫ßn
def print_server_url():
    try:
        hostname = socket.gethostname()
        ip = socket.gethostbyname(hostname)
        print(f"üåê Server n·ªôi b·ªô: http://{ip}:8080")
    except:
        pass


# L·∫∑p schedule
def run_loop():
    while True:
        schedule.run_pending()
        time.sleep(60)


check_signals()
print_server_url()
threading.Thread(target=run_loop).start()
app.run(host="0.0.0.0", port=8080)
